apiVersion: v1
kind: Namespace
metadata:
  name: hotel-mapping
  labels:
    name: hotel-mapping
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hotel-mapping-config
  namespace: hotel-mapping
data:
  DB_NAME: "hotel_mapping"
  NODE_ENV: "production"
  PYTHONPATH: "/app"
---
apiVersion: v1
kind: Secret
metadata:
  name: hotel-mapping-secrets
  namespace: hotel-mapping
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # echo -n "your-mapbox-token" | base64
  MAPBOX_ACCESS_TOKEN: cGsueW91cl9tYXBib3hfdG9rZW5faGVyZQ==
  # echo -n "your-jwt-secret" | base64
  JWT_SECRET: aG90ZWwtbWFwcGluZy1zdXBlci1zZWNyZXQtand0LWtleQ==
  # echo -n "mongodb://mongodb-service:27017" | base64
  MONGO_URL: bW9uZ29kYjovL21vbmdvZGItc2VydmljZToyNzAxNw==
  # echo -n "admin" | base64
  MONGO_ROOT_USER: YWRtaW4=
  # echo -n "securepassword123" | base64
  MONGO_ROOT_PASSWORD: c2VjdXJlcGFzc3dvcmQxMjM=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: hotel-mapping
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: hotel-mapping
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: hotel-mapping-config
              key: DB_NAME
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: MONGO_ROOT_USER
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: MONGO_ROOT_PASSWORD
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: init-script
        configMap:
          name: mongo-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: hotel-mapping
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: hotel-mapping
  labels:
    app: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-org/hotel-mapping/backend:latest
        ports:
        - containerPort: 8001
        env:
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: MONGO_URL
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: hotel-mapping-config
              key: DB_NAME
        - name: MAPBOX_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: MAPBOX_ACCESS_TOKEN
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/hotels
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/hotels
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      initContainers:
      - name: wait-for-mongodb
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z mongodb-service 27017; do echo waiting for mongodb; sleep 2; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: hotel-mapping
spec:
  selector:
    app: backend
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: hotel-mapping
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-org/hotel-mapping/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_BACKEND_URL
          value: "https://your-domain.com"
        - name: REACT_APP_MAPBOX_TOKEN
          valueFrom:
            secretKeyRef:
              name: hotel-mapping-secrets
              key: MAPBOX_ACCESS_TOKEN
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: hotel-mapping
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hotel-mapping-ingress
  namespace: hotel-mapping
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: hotel-mapping-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-script
  namespace: hotel-mapping
data:
  mongo-init.js: |
    // MongoDB initialization script for Kubernetes
    print('Starting MongoDB initialization...');

    db = db.getSiblingDB('hotel_mapping');

    // Create collections
    db.createCollection('users');
    db.createCollection('hotels');

    // Create indexes
    db.users.createIndex({ "email": 1 }, { unique: true });
    db.hotels.createIndex({ "location": "2dsphere" });
    db.hotels.createIndex({ "owner_id": 1 });
    db.hotels.createIndex({ "name": "text", "description": "text", "address": "text" });
    db.hotels.createIndex({ "price": 1 });
    db.hotels.createIndex({ "rating": 1 });
    db.hotels.createIndex({ "amenities": 1 });
    db.hotels.createIndex({ "home_office_amenities": 1 });

    print('MongoDB initialization completed successfully!');
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: hotel-mapping
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: frontend-pdb
  namespace: hotel-mapping
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: hotel-mapping
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: hotel-mapping
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70