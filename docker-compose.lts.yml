version: '3.8'

# Alternative Docker Compose with Node.js 20 LTS
services:
  mongodb:
    image: mongo:7
    container_name: hotel-mapping-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: hotel_mapping
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27013:27017"
    networks:
      - hotel-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/hotel_mapping --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hotel-mapping-backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://mongodb:27017
      - DB_NAME=hotel_mapping
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - hotel-network
    volumes:
      - ./backend:/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/hotels"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.lts  # Uses Node.js 20 LTS
      args:
        - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8001}
        - REACT_APP_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
    container_name: hotel-mapping-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hotel-network
      
volumes:
  mongodb_data:
    driver: local

networks:
  hotel-network:
    driver: bridge
