version: '3.8'

services:
  mongodb:
    image: mongo:7
    container_name: hotel-mapping-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_DATABASE: hotel_mapping
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-securepassword}
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - hotel-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/hotel_mapping --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: hotel-mapping-backend-prod
    restart: always
    environment:
      - MONGO_URL=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-securepassword}@mongodb:27017/hotel_mapping?authSource=admin
      - DB_NAME=hotel_mapping
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/hotels"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8001}
        - REACT_APP_MAPBOX_TOKEN=${MAPBOX_ACCESS_TOKEN}
    container_name: hotel-mapping-frontend-prod
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: hotel-mapping-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - hotel-network

volumes:
  mongodb_prod_data:
    driver: local

networks:
  hotel-network:
    driver: bridge
