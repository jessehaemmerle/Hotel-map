# Debug Dockerfile for troubleshooting container issues
FROM node:20-alpine AS builder

WORKDIR /app

# Accept build arguments with defaults
ARG REACT_APP_BACKEND_URL=http://localhost:8001
ARG REACT_APP_MAPBOX_TOKEN=pk.placeholder_token_get_from_mapbox

# Copy package files
COPY frontend/package.json frontend/yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy source code
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/postcss.config.js ./
COPY frontend/tailwind.config.js ./

# Copy existing .env file if present
COPY frontend/.env* ./ || true

# Create production environment file
RUN echo "REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}" > .env.production && \
    echo "REACT_APP_MAPBOX_TOKEN=${REACT_APP_MAPBOX_TOKEN}" >> .env.production

# Debug: Show environment
RUN echo "=== BUILD ENVIRONMENT ===" && \
    echo "REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}" && \
    echo "REACT_APP_MAPBOX_TOKEN=***" && \
    cat .env.production

# Build the application
RUN yarn build

# Debug: Show build output
RUN echo "=== BUILD COMPLETE ===" && \
    ls -la build/ && \
    echo "=== BUILT FILES ===" && \
    find build -name "*.js" -o -name "*.html" | head -5

# Production stage
FROM nginx:alpine

# Install debugging tools
RUN apk add --no-cache curl netcat-openbsd

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built app
COPY --from=builder /app/build /usr/share/nginx/html

# Debug: Show copied files
RUN echo "=== NGINX SETUP ===" && \
    ls -la /usr/share/nginx/html/ && \
    echo "=== NGINX CONFIG ===" && \
    cat /etc/nginx/conf.d/default.conf

# Create startup script with debugging
RUN cat > /startup.sh << 'EOF'
#!/bin/sh
echo "=== STARTING NGINX ==="
echo "Current time: $(date)"
echo "Container IP: $(hostname -i)"

echo "=== TESTING NGINX CONFIG ==="
nginx -t

echo "=== STARTING NGINX DAEMON ==="
nginx -g "daemon off;" &
NGINX_PID=$!

echo "=== WAITING FOR NGINX ==="
sleep 5

echo "=== TESTING HEALTH ENDPOINT ==="
curl -v http://localhost:3000 || echo "Health check failed"

echo "=== TESTING ROOT ENDPOINT ==="
curl -I http://localhost:3000/ || echo "Root endpoint failed"

echo "=== NGINX PROCESS STATUS ==="
ps aux | grep nginx

echo "=== KEEPING NGINX RUNNING ==="
wait $NGINX_PID
EOF

RUN chmod +x /startup.sh

EXPOSE 3000

# Use debug startup script
CMD ["/startup.sh"]